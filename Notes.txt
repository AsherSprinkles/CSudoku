TODO:
    How do we find out if a solution is unique?
        After doing this, I can work on removing values from the grid to make a game
    Turn sudoku.c into a library with .h file
    Clean up curs.c?
    Make function in curs.c that prints a sudoku grid to the screen
        Set apart values that are actually part of the grid from player-created values
            possibly by inverting text, or bolding it.

I would LIKE to try to put all the solver functions together if possible.




bool is_locally_minimal(Grid grid) {
    for (int i = 0; i < GRID_SIZE; i++) {
        // clear the cell
        int removed = grid.cells[i];
        grid.cells[i] = EMPTY;
        // check for unique solution and replace the cell
        if (has_unique_solution(grid)) return false;
        grid.cells[i] = removed;
    }
    return true;
}

int get_filled_indices(Grid grid, int *indices) {
    // it is assumed that the indices array has a size of GRID_SIZE
    int size = 0;
    // add indices of all nonempty cells in grid to indices array
    for (int i = 0; i < GRID_SIZE; i++) {
        if (grid.cells[i] != EMPTY) {
            indices[size] = grid.cells[i];
            size++;
        }
    }
    return size;
}

bool locally_minimize(Grid *grid, int num_removed, const int num_to_remove) {
    if (is_locally_minimal(*solution)) {
        if (num_removed >= num_to_remove) return true;
        else return false;
    }
    if (!has_unique_solution(*solution)) return false;
    int filled[GRID_SIZE];
    int size = get_filled_indices(*solution, filled);
    for (int i = 0; i < size; i++) {
        int removed = grid->cells[i];
        grid->cells[i] = EMPTY;
        if (locally_minimize(grid, num_removed+1, num_to_remove)) return true;
        grid->cells[i] = removed;
    }
    return false;
}
